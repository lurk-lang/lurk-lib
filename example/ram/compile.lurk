(defmacro or (a b)
  `(if ,a t ,b))

(define map
  (lambda (f xs)
    (if (eq nil xs)
        nil
        (cons (f (car xs)) (map f (cdr xs))))))

(define cadr
  (lambda (xs)
    (car (cdr xs))))

(define caddr
  (lambda (xs)
    (car (cdr (cdr xs)))))

(define cadddr
  (lambda (xs)
    (car (cdr (cdr (cdr xs))))))

(define let-bindings cadr)
(define let-body caddr)
(define lambda-params cadr)
(define lambda-body caddr)

(define lookup
  (lambda (e env success failure)
    (if (eq nil env)
        (failure)
        (if (eq e (car (car env)))
            (success (cdr (car env)))
            (lookup e (cdr env) success failure)))))

(define member
  (lambda (e xs)
    (if (eq nil xs)
        nil
        (if (eq e (car xs))
            xs
            (member e (cdr xs))))))

(define compile-closure
  (lambda (e params ram env)
    (let ((init-params (append `(if current-env current-ram eval begin atom car cdr emit quote macroexpand + - / * = eq cons) params))
          (rec (lambda (e) (compile-closure e init-params ram env)))
          (rec-params (lambda (e params) (compile-closure e (append init-params params) ram env))))
      (if (atom e)
          (if (member e params)
              e
              (lookup e ram (lambda (v) e) (lambda () (lookup e env (lambda (v) v) (lambda () e)))))
          (let ((tag (car e)))
            (if (or (eq 'let tag) (eq 'letrec tag))
                ;; TODO: this does not shadow the binders in the RHS
                `(,tag
                  ,(map (lambda (b) `(,(car b) ,(rec (cadr b)))) (let-bindings e))
                  ,(rec-params (let-body e) (append (map (lambda (b) (car b)) (let-bindings e)) params)))
                (if (eq 'lambda tag)
                    `(,tag ,(lambda-params e) ,(rec-params (lambda-body e) (append (lambda-params e) params)))
                    ;; do we need to treat macros and vanilla application differently?
                    ;; maybe do not optimize macros?
                    (map rec e))))))))
